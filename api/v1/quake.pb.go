// Code generated by protoc-gen-go. DO NOT EDIT.
// source: quake/api/v1/quake.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Alert according to https://earthquake.usgs.gov/data/pager/background.php
type Alert int32

const (
	Alert_ALERT_UNSPECIFIED Alert = 0
	// The suggested levels of response: international.
	Alert_ALERT_RED Alert = 1
	// The suggested levels of response: national.
	Alert_ALERT_ORANGE Alert = 2
	// The suggested levels of response: local/regional.
	Alert_ALERT_YELLOW Alert = 3
	// The suggested levels of response: no response needed.
	Alert_ALERT_GREEN Alert = 4
)

var Alert_name = map[int32]string{
	0: "ALERT_UNSPECIFIED",
	1: "ALERT_RED",
	2: "ALERT_ORANGE",
	3: "ALERT_YELLOW",
	4: "ALERT_GREEN",
}

var Alert_value = map[string]int32{
	"ALERT_UNSPECIFIED": 0,
	"ALERT_RED":         1,
	"ALERT_ORANGE":      2,
	"ALERT_YELLOW":      3,
	"ALERT_GREEN":       4,
}

func (x Alert) String() string {
	return proto.EnumName(Alert_name, int32(x))
}

func (Alert) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{0}
}

// USGS docs: "Status indicates whether the event has been reviewed by a human".
type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	// USGS docs: "Automatic events are directly posted by automatic processing systems".
	Status_STATUS_AUTOMATIC Status = 1
	// USGS docs: "Reviewed events have been looked at by a human".
	Status_STATUS_REVIEWED Status = 2
	Status_STATUS_DELETED  Status = 3
)

var Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_AUTOMATIC",
	2: "STATUS_REVIEWED",
	3: "STATUS_DELETED",
}

var Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_AUTOMATIC":   1,
	"STATUS_REVIEWED":    2,
	"STATUS_DELETED":     3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{1}
}

// USGS docs: "Type indicates the type of a seismic event".
type Type int32

const (
	Type_TYPE_UNSPECIFIED Type = 0
	Type_TYPE_EARTHQUAKE  Type = 1
	Type_TYPE_QUARRY      Type = 2
)

var Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_EARTHQUAKE",
	2: "TYPE_QUARRY",
}

var Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_EARTHQUAKE":  1,
	"TYPE_QUARRY":      2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{2}
}

// EarthquakeCollection represents a feature collection of earthquakes based on
// the "GeoJSON Summary Format" of the USGS Earthquake Hazards program.
type EarthquakeCollection struct {
	// Metadata for a set of earthquakes.
	Metadata *EarthquakeMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Bounds for a set of earthquakes as geographical bounding box.
	Bounds *GeoBoundsE7 `protobuf:"bytes,2,opt,name=bounds,proto3" json:"bounds,omitempty"`
	// Features contains a list of Earthquake objects.
	Features             []*Earthquake `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EarthquakeCollection) Reset()         { *m = EarthquakeCollection{} }
func (m *EarthquakeCollection) String() string { return proto.CompactTextString(m) }
func (*EarthquakeCollection) ProtoMessage()    {}
func (*EarthquakeCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{0}
}

func (m *EarthquakeCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EarthquakeCollection.Unmarshal(m, b)
}
func (m *EarthquakeCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EarthquakeCollection.Marshal(b, m, deterministic)
}
func (m *EarthquakeCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarthquakeCollection.Merge(m, src)
}
func (m *EarthquakeCollection) XXX_Size() int {
	return xxx_messageInfo_EarthquakeCollection.Size(m)
}
func (m *EarthquakeCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_EarthquakeCollection.DiscardUnknown(m)
}

var xxx_messageInfo_EarthquakeCollection proto.InternalMessageInfo

func (m *EarthquakeCollection) GetMetadata() *EarthquakeMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EarthquakeCollection) GetBounds() *GeoBoundsE7 {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *EarthquakeCollection) GetFeatures() []*Earthquake {
	if m != nil {
		return m.Features
	}
	return nil
}

// Earthquake feature with position (point geometry) and some key properties.
type Earthquake struct {
	// USGS docs: "A (generally) two-character network identifier with a (generally)
	// eight-character network-assigned code. A unique identifier for the event.
	// This is the current preferred id for the event, and may change over time".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// USGS docs: "The coordinates of the epicenter in the WGS84 reference frame and
	// the depth where the earthquake begins to rupture".
	Position *GeoPointE7 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	// USGS docs: "The magnitude for the event". Typical value range is [-1.0, 10.0].
	// GeoJSON property: "mag".
	Magnitude float32 `protobuf:"fixed32,3,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	// USGS docs: "Textual description of named geographic region near to the event".
	Place string `protobuf:"bytes,4,opt,name=place,proto3" json:"place,omitempty"`
	// USGS docs: "Time (seconds) when the event occurred".
	// Time is UTC time since Unix epoch 1970-01-01T00:00:00Z.
	Time int64 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	// USGS docs: "Time (seconds) when the event was most recently updated".
	// Time is UTC time since Unix epoch 1970-01-01T00:00:00Z.
	// GeoJSON property: "updated".
	UpdatedTime int64 `protobuf:"varint,6,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	// USGS docs: "Timezone offset from UTC in minutes at the event epicenter".
	// GeoJSON property: "tz".
	TimezoneOffset int32 `protobuf:"zigzag32,7,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	// USGS docs: "The suggested level of response".
	Alert Alert `protobuf:"varint,8,opt,name=alert,proto3,enum=quake.api.v1.Alert" json:"alert,omitempty"`
	// USGS docs: "A number describing how significant the event is. Larger numbers indicate
	// a more significant event". Typical value range is [0, 1000].
	// GeoJSON property: "sig".
	Significance int32 `protobuf:"varint,9,opt,name=significance,proto3" json:"significance,omitempty"`
	// Detailed information when available. Note that this field can be null.
	Details              *EarthquakeDetails `protobuf:"bytes,10,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Earthquake) Reset()         { *m = Earthquake{} }
func (m *Earthquake) String() string { return proto.CompactTextString(m) }
func (*Earthquake) ProtoMessage()    {}
func (*Earthquake) Descriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{1}
}

func (m *Earthquake) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Earthquake.Unmarshal(m, b)
}
func (m *Earthquake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Earthquake.Marshal(b, m, deterministic)
}
func (m *Earthquake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Earthquake.Merge(m, src)
}
func (m *Earthquake) XXX_Size() int {
	return xxx_messageInfo_Earthquake.Size(m)
}
func (m *Earthquake) XXX_DiscardUnknown() {
	xxx_messageInfo_Earthquake.DiscardUnknown(m)
}

var xxx_messageInfo_Earthquake proto.InternalMessageInfo

func (m *Earthquake) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Earthquake) GetPosition() *GeoPointE7 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Earthquake) GetMagnitude() float32 {
	if m != nil {
		return m.Magnitude
	}
	return 0
}

func (m *Earthquake) GetPlace() string {
	if m != nil {
		return m.Place
	}
	return ""
}

func (m *Earthquake) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Earthquake) GetUpdatedTime() int64 {
	if m != nil {
		return m.UpdatedTime
	}
	return 0
}

func (m *Earthquake) GetTimezoneOffset() int32 {
	if m != nil {
		return m.TimezoneOffset
	}
	return 0
}

func (m *Earthquake) GetAlert() Alert {
	if m != nil {
		return m.Alert
	}
	return Alert_ALERT_UNSPECIFIED
}

func (m *Earthquake) GetSignificance() int32 {
	if m != nil {
		return m.Significance
	}
	return 0
}

func (m *Earthquake) GetDetails() *EarthquakeDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// Earthquake detailed properties.
type EarthquakeDetails struct {
	// USGS docs: "A (generally) two-character network identifier with a (generally)
	// eight-character network-assigned code. A unique identifier for the event.
	// This is the current preferred id for the event, and may change over time".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// USGS docs: "Link to USGS Event Page for event".
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// USGS docs: "Link to GeoJSON detail feed from a GeoJSON summary feed".
	// GeoJSON property: "detail".
	DetailFeedUrl string `protobuf:"bytes,3,opt,name=detail_feed_url,json=detailFeedUrl,proto3" json:"detail_feed_url,omitempty"`
	// USGS docs: "The total number of felt reports submitted to the DYFI? system".
	// Typical values: [44, 843].
	Felt int32 `protobuf:"varint,4,opt,name=felt,proto3" json:"felt,omitempty"`
	// USGS docs: "The maximum reported intensity for the event. Computed by DYFI".
	// Typical value range is [0.0, 10.0].
	// GeoJSON property: "cdi".
	ReportedIntensity float32 `protobuf:"fixed32,5,opt,name=reported_intensity,json=reportedIntensity,proto3" json:"reported_intensity,omitempty"`
	// USGS docs: "The maximum estimated instrumental intensity for the event.
	// Computed by ShakeMap". Typical value range is [0.0, 10.0].
	// GeoJSON property: "mmi".
	EstimatedIntensity float32 `protobuf:"fixed32,6,opt,name=estimated_intensity,json=estimatedIntensity,proto3" json:"estimated_intensity,omitempty"`
	// USGS docs: "Status indicates whether the event has been reviewed by a human".
	Status Status `protobuf:"varint,7,opt,name=status,proto3,enum=quake.api.v1.Status" json:"status,omitempty"`
	// USGS docs: "True for large events in oceanic regions, false otherwise. Does not
	// indicate if a tsunami actually did or will exist".
	Tsunami bool `protobuf:"varint,8,opt,name=tsunami,proto3" json:"tsunami,omitempty"`
	// USGS docs: "The ID of a data contributor. Identifies the network considered to be
	// the preferred source of information for this event". Typical values:
	// ak, at, ci, hv, ld, mb, nc, nm, nn, pr, pt, se, us, uu, uw.
	// GeoJSON property: "net".
	Network string `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	// USGS docs: "An identifying code assigned by - and unique from - the corresponding
	// source for the event". Typical values: "2013lgaz", "c000f1jy", "71935551".
	Code string `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	// USGS docs: "A comma-separated list of event ids that are associated to an event".
	// Typical values: ",ci15296281,us2013mqbd,at00mji9pf,".
	Ids string `protobuf:"bytes,11,opt,name=ids,proto3" json:"ids,omitempty"`
	// USGS docs: "A comma-separated list of network contributors".
	// Typical values: ",us,nc,ci,".
	Sources string `protobuf:"bytes,12,opt,name=sources,proto3" json:"sources,omitempty"`
	// USGS docs: "A comma-separated list of product types associated to this event".
	// Typical values: “,cap,dyfi,general-link,origin,p-wave-travel-times,phase-data,”.
	// GeoJSON property: "types".
	ProductTypes string `protobuf:"bytes,13,opt,name=product_types,json=productTypes,proto3" json:"product_types,omitempty"`
	// USGS docs: "The total number of seismic stations used to determine
	// earthquake location".
	Nst int32 `protobuf:"varint,14,opt,name=nst,proto3" json:"nst,omitempty"`
	// USGS docs: "Horizontal distance from the epicenter to the nearest station (in
	// degrees)". Typical values: [0.4, 7.1].
	Dmin float32 `protobuf:"fixed32,15,opt,name=dmin,proto3" json:"dmin,omitempty"`
	// USGS docs: "The root-mean-square (RMS) travel time residual, in sec, using all
	// weights". Typical values: [0.13,1.39].
	Rms float32 `protobuf:"fixed32,16,opt,name=rms,proto3" json:"rms,omitempty"`
	// USGS docs: "The largest azimuthal gap between azimuthally adjacent stations (in
	// degrees)"". Typical values: [0.0, 180.0].
	Gap float32 `protobuf:"fixed32,17,opt,name=gap,proto3" json:"gap,omitempty"`
	// USGS docs: "The method or algorithm used to calculate the preferred magnitude for the
	// event". Typical values: “Md”, “Ml”, “Ms”, “Mw”, “Me”, “Mi”, “Mb”, “MLg”.
	// More information:
	// https://www.usgs.gov/natural-hazards/earthquake-hazards/science/magnitude-types?qt-science_center_objects=0#qt-science_center_objects
	MagType string `protobuf:"bytes,18,opt,name=mag_type,json=magType,proto3" json:"mag_type,omitempty"`
	// USGS docs: "Type of seismic event".
	Type                 Type     `protobuf:"varint,19,opt,name=type,proto3,enum=quake.api.v1.Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EarthquakeDetails) Reset()         { *m = EarthquakeDetails{} }
func (m *EarthquakeDetails) String() string { return proto.CompactTextString(m) }
func (*EarthquakeDetails) ProtoMessage()    {}
func (*EarthquakeDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{2}
}

func (m *EarthquakeDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EarthquakeDetails.Unmarshal(m, b)
}
func (m *EarthquakeDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EarthquakeDetails.Marshal(b, m, deterministic)
}
func (m *EarthquakeDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarthquakeDetails.Merge(m, src)
}
func (m *EarthquakeDetails) XXX_Size() int {
	return xxx_messageInfo_EarthquakeDetails.Size(m)
}
func (m *EarthquakeDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_EarthquakeDetails.DiscardUnknown(m)
}

var xxx_messageInfo_EarthquakeDetails proto.InternalMessageInfo

func (m *EarthquakeDetails) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EarthquakeDetails) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EarthquakeDetails) GetDetailFeedUrl() string {
	if m != nil {
		return m.DetailFeedUrl
	}
	return ""
}

func (m *EarthquakeDetails) GetFelt() int32 {
	if m != nil {
		return m.Felt
	}
	return 0
}

func (m *EarthquakeDetails) GetReportedIntensity() float32 {
	if m != nil {
		return m.ReportedIntensity
	}
	return 0
}

func (m *EarthquakeDetails) GetEstimatedIntensity() float32 {
	if m != nil {
		return m.EstimatedIntensity
	}
	return 0
}

func (m *EarthquakeDetails) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (m *EarthquakeDetails) GetTsunami() bool {
	if m != nil {
		return m.Tsunami
	}
	return false
}

func (m *EarthquakeDetails) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *EarthquakeDetails) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *EarthquakeDetails) GetIds() string {
	if m != nil {
		return m.Ids
	}
	return ""
}

func (m *EarthquakeDetails) GetSources() string {
	if m != nil {
		return m.Sources
	}
	return ""
}

func (m *EarthquakeDetails) GetProductTypes() string {
	if m != nil {
		return m.ProductTypes
	}
	return ""
}

func (m *EarthquakeDetails) GetNst() int32 {
	if m != nil {
		return m.Nst
	}
	return 0
}

func (m *EarthquakeDetails) GetDmin() float32 {
	if m != nil {
		return m.Dmin
	}
	return 0
}

func (m *EarthquakeDetails) GetRms() float32 {
	if m != nil {
		return m.Rms
	}
	return 0
}

func (m *EarthquakeDetails) GetGap() float32 {
	if m != nil {
		return m.Gap
	}
	return 0
}

func (m *EarthquakeDetails) GetMagType() string {
	if m != nil {
		return m.MagType
	}
	return ""
}

func (m *EarthquakeDetails) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_TYPE_UNSPECIFIED
}

// EarthquakeMetadata contains meta data for a set of earthquakes.
type EarthquakeMetadata struct {
	// USGS docs: "Time (seconds) when the feed was most recently updated".
	// Time is UTC time since Unix epoch 1970-01-01T00:00:00Z.
	GeneratedTime int64 `protobuf:"varint,1,opt,name=generated_time,json=generatedTime,proto3" json:"generated_time,omitempty"`
	// USGS docs: "Url of the feed".
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// USGS docs: "The title of the feed". Typical values:
	// “USGS Magnitude 1+ Earthquakes, Past Day”,
	// “USGS Magnitude 4.5+ Earthquakes, Past Month”
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// USGS docs: "Version of API that generated feed".
	Api string `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`
	// USGS docs: "Number of earthquakes in feed".
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	// USGS docs: "HTTP status code of response".
	HttpStatus           string   `protobuf:"bytes,6,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EarthquakeMetadata) Reset()         { *m = EarthquakeMetadata{} }
func (m *EarthquakeMetadata) String() string { return proto.CompactTextString(m) }
func (*EarthquakeMetadata) ProtoMessage()    {}
func (*EarthquakeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{3}
}

func (m *EarthquakeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EarthquakeMetadata.Unmarshal(m, b)
}
func (m *EarthquakeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EarthquakeMetadata.Marshal(b, m, deterministic)
}
func (m *EarthquakeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarthquakeMetadata.Merge(m, src)
}
func (m *EarthquakeMetadata) XXX_Size() int {
	return xxx_messageInfo_EarthquakeMetadata.Size(m)
}
func (m *EarthquakeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_EarthquakeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_EarthquakeMetadata proto.InternalMessageInfo

func (m *EarthquakeMetadata) GetGeneratedTime() int64 {
	if m != nil {
		return m.GeneratedTime
	}
	return 0
}

func (m *EarthquakeMetadata) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EarthquakeMetadata) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EarthquakeMetadata) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *EarthquakeMetadata) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *EarthquakeMetadata) GetHttpStatus() string {
	if m != nil {
		return m.HttpStatus
	}
	return ""
}

// GeoBoundsE7 is a geographic bounding box (WGS84 latitude and longitude
// are in E7 format, height is centimeters with negative values meaning depth).
// The E7 format with 32 bit ints is used to optimize wire transfer.
type GeoBoundsE7 struct {
	MinLatitude          int32    `protobuf:"fixed32,1,opt,name=min_latitude,json=minLatitude,proto3" json:"min_latitude,omitempty"`
	MinLongitude         int32    `protobuf:"fixed32,2,opt,name=min_longitude,json=minLongitude,proto3" json:"min_longitude,omitempty"`
	MinHeight            int32    `protobuf:"zigzag32,3,opt,name=min_height,json=minHeight,proto3" json:"min_height,omitempty"`
	MaxLatitude          int32    `protobuf:"fixed32,4,opt,name=max_latitude,json=maxLatitude,proto3" json:"max_latitude,omitempty"`
	MaxLongitude         int32    `protobuf:"fixed32,5,opt,name=max_longitude,json=maxLongitude,proto3" json:"max_longitude,omitempty"`
	MaxHeight            int32    `protobuf:"zigzag32,6,opt,name=max_height,json=maxHeight,proto3" json:"max_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoBoundsE7) Reset()         { *m = GeoBoundsE7{} }
func (m *GeoBoundsE7) String() string { return proto.CompactTextString(m) }
func (*GeoBoundsE7) ProtoMessage()    {}
func (*GeoBoundsE7) Descriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{4}
}

func (m *GeoBoundsE7) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoBoundsE7.Unmarshal(m, b)
}
func (m *GeoBoundsE7) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoBoundsE7.Marshal(b, m, deterministic)
}
func (m *GeoBoundsE7) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoBoundsE7.Merge(m, src)
}
func (m *GeoBoundsE7) XXX_Size() int {
	return xxx_messageInfo_GeoBoundsE7.Size(m)
}
func (m *GeoBoundsE7) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoBoundsE7.DiscardUnknown(m)
}

var xxx_messageInfo_GeoBoundsE7 proto.InternalMessageInfo

func (m *GeoBoundsE7) GetMinLatitude() int32 {
	if m != nil {
		return m.MinLatitude
	}
	return 0
}

func (m *GeoBoundsE7) GetMinLongitude() int32 {
	if m != nil {
		return m.MinLongitude
	}
	return 0
}

func (m *GeoBoundsE7) GetMinHeight() int32 {
	if m != nil {
		return m.MinHeight
	}
	return 0
}

func (m *GeoBoundsE7) GetMaxLatitude() int32 {
	if m != nil {
		return m.MaxLatitude
	}
	return 0
}

func (m *GeoBoundsE7) GetMaxLongitude() int32 {
	if m != nil {
		return m.MaxLongitude
	}
	return 0
}

func (m *GeoBoundsE7) GetMaxHeight() int32 {
	if m != nil {
		return m.MaxHeight
	}
	return 0
}

// GeoPointE7 is a geographic point (WGS84 latitude and longitude are
// in E7 format and height is centimeters with negative values meaning depth).
// The E7 format with 32 bit ints is used to optimize wire transfer.
type GeoPointE7 struct {
	Latitude             int32    `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int32    `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Height               int32    `protobuf:"zigzag32,3,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoPointE7) Reset()         { *m = GeoPointE7{} }
func (m *GeoPointE7) String() string { return proto.CompactTextString(m) }
func (*GeoPointE7) ProtoMessage()    {}
func (*GeoPointE7) Descriptor() ([]byte, []int) {
	return fileDescriptor_d542a431c78f4780, []int{5}
}

func (m *GeoPointE7) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoPointE7.Unmarshal(m, b)
}
func (m *GeoPointE7) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoPointE7.Marshal(b, m, deterministic)
}
func (m *GeoPointE7) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoPointE7.Merge(m, src)
}
func (m *GeoPointE7) XXX_Size() int {
	return xxx_messageInfo_GeoPointE7.Size(m)
}
func (m *GeoPointE7) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoPointE7.DiscardUnknown(m)
}

var xxx_messageInfo_GeoPointE7 proto.InternalMessageInfo

func (m *GeoPointE7) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoPointE7) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GeoPointE7) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterEnum("quake.api.v1.Alert", Alert_name, Alert_value)
	proto.RegisterEnum("quake.api.v1.Status", Status_name, Status_value)
	proto.RegisterEnum("quake.api.v1.Type", Type_name, Type_value)
	proto.RegisterType((*EarthquakeCollection)(nil), "quake.api.v1.EarthquakeCollection")
	proto.RegisterType((*Earthquake)(nil), "quake.api.v1.Earthquake")
	proto.RegisterType((*EarthquakeDetails)(nil), "quake.api.v1.EarthquakeDetails")
	proto.RegisterType((*EarthquakeMetadata)(nil), "quake.api.v1.EarthquakeMetadata")
	proto.RegisterType((*GeoBoundsE7)(nil), "quake.api.v1.GeoBoundsE7")
	proto.RegisterType((*GeoPointE7)(nil), "quake.api.v1.GeoPointE7")
}

func init() { proto.RegisterFile("quake/api/v1/quake.proto", fileDescriptor_d542a431c78f4780) }

var fileDescriptor_d542a431c78f4780 = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xdf, 0x6e, 0x23, 0xb5,
	0x1b, 0xfd, 0xcd, 0xe4, 0x4f, 0x93, 0x2f, 0x69, 0x32, 0x71, 0xf3, 0x5b, 0x79, 0x11, 0x68, 0x43,
	0x10, 0x4b, 0xa8, 0xa0, 0x55, 0x0b, 0xd2, 0x0a, 0x89, 0x9b, 0xb4, 0xf1, 0x76, 0x2b, 0xb2, 0x6d,
	0xd7, 0x4d, 0x58, 0x95, 0x0b, 0x22, 0x37, 0xe3, 0xa4, 0xd6, 0x66, 0xfe, 0x30, 0xe3, 0x29, 0x5d,
	0xde, 0x87, 0x3b, 0x5e, 0x81, 0x27, 0xe1, 0x25, 0x78, 0x04, 0xe4, 0xcf, 0x93, 0x64, 0xd3, 0x68,
	0xef, 0xfc, 0x9d, 0x73, 0x3e, 0x1f, 0xfb, 0x78, 0xec, 0x01, 0xfa, 0x5b, 0x26, 0xde, 0xc9, 0x43,
	0x11, 0xab, 0xc3, 0xfb, 0xa3, 0x43, 0x2c, 0x0e, 0xe2, 0x24, 0xd2, 0x11, 0xa9, 0xdb, 0x42, 0xc4,
	0xea, 0xe0, 0xfe, 0xa8, 0xfb, 0xb7, 0x03, 0x6d, 0x26, 0x12, 0x7d, 0x87, 0xe8, 0x69, 0xb4, 0x58,
	0xc8, 0xa9, 0x56, 0x51, 0x48, 0x7e, 0x84, 0x4a, 0x20, 0xb5, 0xf0, 0x85, 0x16, 0xd4, 0xe9, 0x38,
	0xbd, 0xda, 0x71, 0xe7, 0xe0, 0xc3, 0xce, 0x83, 0x75, 0xd7, 0xeb, 0x5c, 0xc7, 0x57, 0x1d, 0xe4,
	0x08, 0xca, 0xb7, 0x51, 0x16, 0xfa, 0x29, 0x75, 0xb1, 0xf7, 0xe9, 0x66, 0xef, 0x99, 0x8c, 0x4e,
	0x90, 0x66, 0x2f, 0x78, 0x2e, 0x24, 0xdf, 0x43, 0x65, 0x26, 0x85, 0xce, 0x12, 0x99, 0xd2, 0x42,
	0xa7, 0xd0, 0xab, 0x1d, 0xd3, 0x8f, 0x19, 0xf2, 0x95, 0xb2, 0xfb, 0xaf, 0x0b, 0xb0, 0x26, 0x48,
	0x03, 0x5c, 0xe5, 0xe3, 0x7a, 0xab, 0xdc, 0x55, 0xbe, 0x99, 0x34, 0x8e, 0x52, 0x65, 0x76, 0x94,
	0xaf, 0x84, 0x6e, 0xad, 0xe4, 0x2a, 0x52, 0xa1, 0x66, 0x2f, 0xf8, 0x4a, 0x49, 0x3e, 0x85, 0x6a,
	0x20, 0xe6, 0xa1, 0xd2, 0x99, 0x2f, 0x69, 0xa1, 0xe3, 0xf4, 0x5c, 0xbe, 0x06, 0x48, 0x1b, 0x4a,
	0xf1, 0x42, 0x4c, 0x25, 0x2d, 0xa2, 0x8d, 0x2d, 0x08, 0x81, 0xa2, 0x56, 0x81, 0xa4, 0xa5, 0x8e,
	0xd3, 0x2b, 0x70, 0x1c, 0x93, 0xcf, 0xa1, 0x9e, 0xc5, 0xbe, 0xd0, 0xd2, 0x9f, 0x20, 0x57, 0x46,
	0xae, 0x96, 0x63, 0x23, 0x23, 0xf9, 0x0a, 0x9a, 0x86, 0xfa, 0x23, 0x0a, 0xe5, 0x24, 0x9a, 0xcd,
	0x52, 0xa9, 0xe9, 0x4e, 0xc7, 0xe9, 0xb5, 0x78, 0x63, 0x09, 0x5f, 0x22, 0x4a, 0xbe, 0x86, 0x92,
	0x58, 0xc8, 0x44, 0xd3, 0x4a, 0xc7, 0xe9, 0x35, 0x8e, 0xf7, 0x36, 0xb7, 0xd1, 0x37, 0x14, 0xb7,
	0x0a, 0xd2, 0x85, 0x7a, 0xaa, 0xe6, 0xa1, 0x9a, 0xa9, 0xa9, 0x08, 0xa7, 0x92, 0x56, 0x3b, 0x4e,
	0xaf, 0xc4, 0x37, 0x30, 0xf2, 0x03, 0xec, 0xf8, 0x52, 0x0b, 0xb5, 0x48, 0x29, 0x60, 0x2e, 0xcf,
	0x3e, 0x16, 0xf6, 0xc0, 0xca, 0xf8, 0x52, 0xdf, 0xfd, 0xb3, 0x08, 0xad, 0x2d, 0x7a, 0x2b, 0x79,
	0x0f, 0x0a, 0x59, 0xb2, 0xc0, 0xd0, 0xab, 0xdc, 0x0c, 0xc9, 0x73, 0x68, 0xda, 0x29, 0x26, 0x33,
	0x29, 0xfd, 0x89, 0x61, 0x0b, 0xc8, 0xee, 0x5a, 0xf8, 0xa5, 0x94, 0xfe, 0x38, 0x59, 0x98, 0x24,
	0x67, 0x72, 0xa1, 0x31, 0xde, 0x12, 0xc7, 0x31, 0xf9, 0x16, 0x48, 0x22, 0xe3, 0x28, 0x31, 0x51,
	0xaa, 0x50, 0xcb, 0x30, 0x55, 0xfa, 0x3d, 0x66, 0xed, 0xf2, 0xd6, 0x92, 0x39, 0x5f, 0x12, 0xe4,
	0x10, 0xf6, 0x64, 0xaa, 0x55, 0x20, 0x36, 0xf5, 0x65, 0xd4, 0x93, 0x15, 0xb5, 0x6e, 0xf8, 0x06,
	0xca, 0xa9, 0x16, 0x3a, 0x4b, 0x31, 0xfd, 0xc6, 0x71, 0x7b, 0x33, 0x8d, 0x6b, 0xe4, 0x78, 0xae,
	0x21, 0x14, 0x76, 0x74, 0x9a, 0x85, 0x22, 0x50, 0x78, 0x1a, 0x15, 0xbe, 0x2c, 0x0d, 0x13, 0x4a,
	0xfd, 0x7b, 0x94, 0xbc, 0xc3, 0xd4, 0xab, 0x7c, 0x59, 0x9a, 0x5d, 0x4d, 0x23, 0x5f, 0x62, 0xda,
	0x55, 0x8e, 0x63, 0x93, 0x91, 0xf2, 0x53, 0x5a, 0xb3, 0x19, 0x29, 0x1f, 0x67, 0x4e, 0xa3, 0x2c,
	0x99, 0xca, 0x94, 0xd6, 0x6d, 0x7f, 0x5e, 0x92, 0x2f, 0x60, 0x37, 0x4e, 0x22, 0x3f, 0x9b, 0xea,
	0x89, 0x7e, 0x1f, 0xcb, 0x94, 0xee, 0x22, 0x5f, 0xcf, 0xc1, 0x91, 0xc1, 0xcc, 0x84, 0x61, 0xaa,
	0x69, 0x03, 0x93, 0x33, 0x43, 0x63, 0xeb, 0x07, 0x2a, 0xa4, 0x4d, 0xdc, 0x3a, 0x8e, 0x8d, 0x2a,
	0x09, 0x52, 0xea, 0x21, 0x64, 0x86, 0x06, 0x99, 0x8b, 0x98, 0xb6, 0x2c, 0x32, 0x17, 0x31, 0x79,
	0x0a, 0x95, 0x40, 0xcc, 0xd1, 0x8a, 0x12, 0xbb, 0x92, 0x40, 0xcc, 0x8d, 0x0b, 0x79, 0x0e, 0x45,
	0x84, 0xf7, 0x30, 0x29, 0xb2, 0x99, 0x94, 0x51, 0x70, 0xe4, 0xbb, 0x7f, 0x39, 0x40, 0xb6, 0x1f,
	0x09, 0xf2, 0x25, 0x34, 0xe6, 0x32, 0x94, 0xc9, 0xfa, 0x5a, 0x38, 0x78, 0x2d, 0x76, 0x57, 0x28,
	0x5e, 0x8c, 0xed, 0xef, 0xa7, 0x0d, 0x25, 0xad, 0xf4, 0x42, 0xe6, 0x5f, 0x8d, 0x2d, 0x8c, 0x4e,
	0xc4, 0x2a, 0xbf, 0x8b, 0x66, 0x68, 0x74, 0xd3, 0x28, 0x0b, 0x35, 0x7e, 0x1e, 0x25, 0x6e, 0x0b,
	0xf2, 0x0c, 0x6a, 0x77, 0x5a, 0xc7, 0x93, 0xfc, 0x98, 0xcb, 0xa8, 0x07, 0x03, 0xd9, 0xc3, 0xed,
	0xfe, 0xe3, 0x40, 0xed, 0x83, 0x77, 0xc9, 0x5c, 0xde, 0x40, 0x85, 0x93, 0x85, 0xd0, 0xf6, 0x1d,
	0x30, 0xab, 0x6c, 0xf2, 0x5a, 0xa0, 0xc2, 0x61, 0x0e, 0x99, 0x33, 0x41, 0x49, 0x14, 0xce, 0xad,
	0xc6, 0x45, 0x8d, 0xe9, 0x1b, 0x2e, 0x31, 0xf2, 0x19, 0x80, 0x11, 0xdd, 0x49, 0x35, 0xbf, 0xd3,
	0xb8, 0xf6, 0x16, 0xaf, 0x06, 0x2a, 0x7c, 0x85, 0x00, 0xda, 0x88, 0x87, 0xb5, 0x4d, 0x31, 0xb7,
	0x11, 0x0f, 0x1b, 0x36, 0x46, 0xb2, 0xb2, 0x29, 0xe5, 0x36, 0xe2, 0x61, 0xd3, 0x46, 0x3c, 0x2c,
	0x6d, 0xca, 0xb9, 0x8d, 0x78, 0xb0, 0x36, 0xdd, 0x5f, 0x01, 0xd6, 0x4f, 0x1d, 0xf9, 0x04, 0x2a,
	0x8f, 0xf6, 0xb5, 0xaa, 0xcd, 0xe3, 0xf7, 0x78, 0x43, 0x6b, 0x80, 0x3c, 0x81, 0xf2, 0xc6, 0x4e,
	0xf2, 0x6a, 0xff, 0x16, 0x4a, 0xf8, 0x06, 0x91, 0xff, 0x43, 0xab, 0x3f, 0x64, 0x7c, 0x34, 0x19,
	0x5f, 0x5c, 0x5f, 0xb1, 0xd3, 0xf3, 0x97, 0xe7, 0x6c, 0xe0, 0xfd, 0x8f, 0xec, 0x42, 0xd5, 0xc2,
	0x9c, 0x0d, 0x3c, 0x87, 0x78, 0x50, 0xb7, 0xe5, 0x25, 0xef, 0x5f, 0x9c, 0x31, 0xcf, 0x5d, 0x23,
	0x37, 0x6c, 0x38, 0xbc, 0x7c, 0xeb, 0x15, 0x48, 0x13, 0x6a, 0x16, 0x39, 0xe3, 0x8c, 0x5d, 0x78,
	0xc5, 0xfd, 0x09, 0x94, 0xed, 0x59, 0x91, 0x27, 0x40, 0xae, 0x47, 0xfd, 0xd1, 0xf8, 0xfa, 0x91,
	0x4b, 0x1b, 0xbc, 0x1c, 0xef, 0x8f, 0x47, 0x97, 0xaf, 0xfb, 0xa3, 0xf3, 0x53, 0xcf, 0x21, 0x7b,
	0xd0, 0xcc, 0x51, 0xce, 0x7e, 0x3e, 0x67, 0x6f, 0xd9, 0xc0, 0x73, 0x09, 0x81, 0x46, 0x0e, 0x0e,
	0xd8, 0x90, 0x8d, 0xd8, 0xc0, 0x2b, 0xec, 0x9f, 0x40, 0x11, 0xbf, 0xf0, 0x36, 0x78, 0xa3, 0x9b,
	0x2b, 0xf6, 0x68, 0xf2, 0x3d, 0x68, 0x22, 0xca, 0xfa, 0x7c, 0xf4, 0xea, 0xcd, 0xb8, 0xff, 0x13,
	0xf3, 0x1c, 0xb3, 0x48, 0x04, 0xdf, 0x8c, 0xfb, 0x9c, 0xdf, 0x78, 0xee, 0x49, 0xf1, 0x17, 0xf7,
	0xfe, 0xe8, 0xb6, 0x8c, 0xff, 0xda, 0xef, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xb8, 0x04,
	0x2a, 0x87, 0x07, 0x00, 0x00,
}
