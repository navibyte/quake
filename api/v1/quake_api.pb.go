// Code generated by protoc-gen-go. DO NOT EDIT.
// source: quake/api/v1/quake_api.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Magnitude is an enum for minimum earthquake magnitudes.
type Magnitude int32

const (
	Magnitude_MAGNITUDE_UNSPECIFIED Magnitude = 0
	Magnitude_MAGNITUDE_SIGNIFICANT Magnitude = 1
	Magnitude_MAGNITUDE_M45_PLUS    Magnitude = 2
	Magnitude_MAGNITUDE_M25_PLUS    Magnitude = 3
	Magnitude_MAGNITUDE_M10_PLUS    Magnitude = 4
	Magnitude_MAGNITUDE_ALL         Magnitude = 5
)

var Magnitude_name = map[int32]string{
	0: "MAGNITUDE_UNSPECIFIED",
	1: "MAGNITUDE_SIGNIFICANT",
	2: "MAGNITUDE_M45_PLUS",
	3: "MAGNITUDE_M25_PLUS",
	4: "MAGNITUDE_M10_PLUS",
	5: "MAGNITUDE_ALL",
}

var Magnitude_value = map[string]int32{
	"MAGNITUDE_UNSPECIFIED": 0,
	"MAGNITUDE_SIGNIFICANT": 1,
	"MAGNITUDE_M45_PLUS":    2,
	"MAGNITUDE_M25_PLUS":    3,
	"MAGNITUDE_M10_PLUS":    4,
	"MAGNITUDE_ALL":         5,
}

func (x Magnitude) String() string {
	return proto.EnumName(Magnitude_name, int32(x))
}

func (Magnitude) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0ffc9850e3e8dd8, []int{0}
}

// Past is an enum for periods for filtering.
type Past int32

const (
	Past_PAST_UNSPECIFIED Past = 0
	Past_PAST_HOUR        Past = 1
	Past_PAST_DAY         Past = 2
	Past_PAST_7DAYS       Past = 3
	Past_PAST_30DAYS      Past = 4
)

var Past_name = map[int32]string{
	0: "PAST_UNSPECIFIED",
	1: "PAST_HOUR",
	2: "PAST_DAY",
	3: "PAST_7DAYS",
	4: "PAST_30DAYS",
}

var Past_value = map[string]int32{
	"PAST_UNSPECIFIED": 0,
	"PAST_HOUR":        1,
	"PAST_DAY":         2,
	"PAST_7DAYS":       3,
	"PAST_30DAYS":      4,
}

func (x Past) String() string {
	return proto.EnumName(Past_name, int32(x))
}

func (Past) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0ffc9850e3e8dd8, []int{1}
}

// ListEarthquakesRequest defines parameters for the ListEarthquakes method.
type ListEarthquakesRequest struct {
	// Magnitude sets the minimum magnitude for filtering earthquakes.
	Magnitude Magnitude `protobuf:"varint,1,opt,name=magnitude,proto3,enum=quake.api.v1.Magnitude" json:"magnitude,omitempty"`
	// Past is a period (like past day) filter.
	Past Past `protobuf:"varint,2,opt,name=past,proto3,enum=quake.api.v1.Past" json:"past,omitempty"`
	// Limit is a maximum number of earthquakes to return. If 0 no limit apply.
	Limit uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Details, if true, tells to return earthquakes with detailed data.
	Details bool `protobuf:"varint,4,opt,name=details,proto3" json:"details,omitempty"`
	// Focus is spatial filter - either around a position or inside bounds.
	// Note that only one ot these properties can be set for a request.
	//
	// Types that are valid to be assigned to Focus:
	//	*ListEarthquakesRequest_Position
	//	*ListEarthquakesRequest_Bounds
	Focus                isListEarthquakesRequest_Focus `protobuf_oneof:"focus"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ListEarthquakesRequest) Reset()         { *m = ListEarthquakesRequest{} }
func (m *ListEarthquakesRequest) String() string { return proto.CompactTextString(m) }
func (*ListEarthquakesRequest) ProtoMessage()    {}
func (*ListEarthquakesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ffc9850e3e8dd8, []int{0}
}

func (m *ListEarthquakesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEarthquakesRequest.Unmarshal(m, b)
}
func (m *ListEarthquakesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEarthquakesRequest.Marshal(b, m, deterministic)
}
func (m *ListEarthquakesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEarthquakesRequest.Merge(m, src)
}
func (m *ListEarthquakesRequest) XXX_Size() int {
	return xxx_messageInfo_ListEarthquakesRequest.Size(m)
}
func (m *ListEarthquakesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEarthquakesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEarthquakesRequest proto.InternalMessageInfo

func (m *ListEarthquakesRequest) GetMagnitude() Magnitude {
	if m != nil {
		return m.Magnitude
	}
	return Magnitude_MAGNITUDE_UNSPECIFIED
}

func (m *ListEarthquakesRequest) GetPast() Past {
	if m != nil {
		return m.Past
	}
	return Past_PAST_UNSPECIFIED
}

func (m *ListEarthquakesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListEarthquakesRequest) GetDetails() bool {
	if m != nil {
		return m.Details
	}
	return false
}

type isListEarthquakesRequest_Focus interface {
	isListEarthquakesRequest_Focus()
}

type ListEarthquakesRequest_Position struct {
	Position *GeoPointE7 `protobuf:"bytes,5,opt,name=position,proto3,oneof"`
}

type ListEarthquakesRequest_Bounds struct {
	Bounds *GeoBoundsE7 `protobuf:"bytes,6,opt,name=bounds,proto3,oneof"`
}

func (*ListEarthquakesRequest_Position) isListEarthquakesRequest_Focus() {}

func (*ListEarthquakesRequest_Bounds) isListEarthquakesRequest_Focus() {}

func (m *ListEarthquakesRequest) GetFocus() isListEarthquakesRequest_Focus {
	if m != nil {
		return m.Focus
	}
	return nil
}

func (m *ListEarthquakesRequest) GetPosition() *GeoPointE7 {
	if x, ok := m.GetFocus().(*ListEarthquakesRequest_Position); ok {
		return x.Position
	}
	return nil
}

func (m *ListEarthquakesRequest) GetBounds() *GeoBoundsE7 {
	if x, ok := m.GetFocus().(*ListEarthquakesRequest_Bounds); ok {
		return x.Bounds
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListEarthquakesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListEarthquakesRequest_Position)(nil),
		(*ListEarthquakesRequest_Bounds)(nil),
	}
}

// ListEarthquakesResponse defines the response for the ListEarthquakes method.
type ListEarthquakesResponse struct {
	// EarthquakeCollection with earthquakes.
	Collection           *EarthquakeCollection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListEarthquakesResponse) Reset()         { *m = ListEarthquakesResponse{} }
func (m *ListEarthquakesResponse) String() string { return proto.CompactTextString(m) }
func (*ListEarthquakesResponse) ProtoMessage()    {}
func (*ListEarthquakesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ffc9850e3e8dd8, []int{1}
}

func (m *ListEarthquakesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEarthquakesResponse.Unmarshal(m, b)
}
func (m *ListEarthquakesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEarthquakesResponse.Marshal(b, m, deterministic)
}
func (m *ListEarthquakesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEarthquakesResponse.Merge(m, src)
}
func (m *ListEarthquakesResponse) XXX_Size() int {
	return xxx_messageInfo_ListEarthquakesResponse.Size(m)
}
func (m *ListEarthquakesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEarthquakesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEarthquakesResponse proto.InternalMessageInfo

func (m *ListEarthquakesResponse) GetCollection() *EarthquakeCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

// GetEarthquakeRequest defines parameters for the GetEarthquake method.
type GetEarthquakeRequest struct {
	// ID of an earthquake to be searched.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Details, if true, tells to return an earthquake with detailed data.
	Details              bool     `protobuf:"varint,2,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEarthquakeRequest) Reset()         { *m = GetEarthquakeRequest{} }
func (m *GetEarthquakeRequest) String() string { return proto.CompactTextString(m) }
func (*GetEarthquakeRequest) ProtoMessage()    {}
func (*GetEarthquakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ffc9850e3e8dd8, []int{2}
}

func (m *GetEarthquakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEarthquakeRequest.Unmarshal(m, b)
}
func (m *GetEarthquakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEarthquakeRequest.Marshal(b, m, deterministic)
}
func (m *GetEarthquakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEarthquakeRequest.Merge(m, src)
}
func (m *GetEarthquakeRequest) XXX_Size() int {
	return xxx_messageInfo_GetEarthquakeRequest.Size(m)
}
func (m *GetEarthquakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEarthquakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEarthquakeRequest proto.InternalMessageInfo

func (m *GetEarthquakeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetEarthquakeRequest) GetDetails() bool {
	if m != nil {
		return m.Details
	}
	return false
}

// GetEarthquakeRequest defines the response for the GetEarthquake method.
type GetEarthquakeResponse struct {
	// Feature as an Earthquake.
	Feature              *Earthquake `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetEarthquakeResponse) Reset()         { *m = GetEarthquakeResponse{} }
func (m *GetEarthquakeResponse) String() string { return proto.CompactTextString(m) }
func (*GetEarthquakeResponse) ProtoMessage()    {}
func (*GetEarthquakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ffc9850e3e8dd8, []int{3}
}

func (m *GetEarthquakeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEarthquakeResponse.Unmarshal(m, b)
}
func (m *GetEarthquakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEarthquakeResponse.Marshal(b, m, deterministic)
}
func (m *GetEarthquakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEarthquakeResponse.Merge(m, src)
}
func (m *GetEarthquakeResponse) XXX_Size() int {
	return xxx_messageInfo_GetEarthquakeResponse.Size(m)
}
func (m *GetEarthquakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEarthquakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEarthquakeResponse proto.InternalMessageInfo

func (m *GetEarthquakeResponse) GetFeature() *Earthquake {
	if m != nil {
		return m.Feature
	}
	return nil
}

func init() {
	proto.RegisterEnum("quake.api.v1.Magnitude", Magnitude_name, Magnitude_value)
	proto.RegisterEnum("quake.api.v1.Past", Past_name, Past_value)
	proto.RegisterType((*ListEarthquakesRequest)(nil), "quake.api.v1.ListEarthquakesRequest")
	proto.RegisterType((*ListEarthquakesResponse)(nil), "quake.api.v1.ListEarthquakesResponse")
	proto.RegisterType((*GetEarthquakeRequest)(nil), "quake.api.v1.GetEarthquakeRequest")
	proto.RegisterType((*GetEarthquakeResponse)(nil), "quake.api.v1.GetEarthquakeResponse")
}

func init() { proto.RegisterFile("quake/api/v1/quake_api.proto", fileDescriptor_c0ffc9850e3e8dd8) }

var fileDescriptor_c0ffc9850e3e8dd8 = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xd9, 0x6e, 0xda, 0x40,
	0x14, 0x8d, 0x1d, 0xb3, 0xdd, 0x00, 0x71, 0x47, 0x59, 0x1c, 0xd4, 0x07, 0xe4, 0x2e, 0x42, 0x79,
	0x80, 0x00, 0x4d, 0xf3, 0x5a, 0xb3, 0x84, 0x58, 0x05, 0xea, 0x0e, 0x20, 0x35, 0x91, 0x5a, 0xe4,
	0xc0, 0xa4, 0x1d, 0x95, 0x30, 0x0e, 0x33, 0xe6, 0x6b, 0xda, 0xff, 0xe9, 0x67, 0x55, 0x0c, 0x66,
	0xb1, 0xe9, 0xf2, 0x78, 0xcf, 0xe6, 0xab, 0x73, 0xc7, 0xf0, 0xfc, 0xc9, 0x77, 0xbf, 0x93, 0x92,
	0xeb, 0xd1, 0xd2, 0xbc, 0x5c, 0x92, 0xc3, 0xd0, 0xf5, 0x68, 0xd1, 0x9b, 0x31, 0xc1, 0x50, 0x5a,
	0x02, 0xc5, 0x05, 0x30, 0x2f, 0xe7, 0x8c, 0x5d, 0xed, 0x52, 0x67, 0xfe, 0x54, 0xe1, 0xa4, 0x4d,
	0xb9, 0x68, 0xba, 0x33, 0xf1, 0x4d, 0x12, 0x1c, 0x93, 0x27, 0x9f, 0x70, 0x81, 0x2e, 0x21, 0xf5,
	0xe8, 0x7e, 0x9d, 0x52, 0xe1, 0x8f, 0x89, 0xa1, 0xe4, 0x95, 0x42, 0xb6, 0x72, 0x5a, 0xdc, 0x8e,
	0x2d, 0x76, 0x56, 0x34, 0xde, 0x28, 0xd1, 0x6b, 0xd0, 0x3c, 0x97, 0x0b, 0x43, 0x95, 0x0e, 0x14,
	0x76, 0x38, 0x2e, 0x17, 0x58, 0xf2, 0xe8, 0x08, 0x62, 0x13, 0xfa, 0x48, 0x85, 0xb1, 0x9f, 0x57,
	0x0a, 0x1a, 0x5e, 0x0e, 0xc8, 0x80, 0xc4, 0x98, 0x08, 0x97, 0x4e, 0xb8, 0xa1, 0xe5, 0x95, 0x42,
	0x12, 0xaf, 0x46, 0xf4, 0x16, 0x92, 0x1e, 0xe3, 0x54, 0x50, 0x36, 0x35, 0x62, 0x79, 0xa5, 0x70,
	0x50, 0x31, 0xc2, 0xd9, 0x2d, 0xc2, 0x1c, 0x46, 0xa7, 0xa2, 0x79, 0x75, 0xb3, 0x87, 0xd7, 0x5a,
	0x54, 0x85, 0xf8, 0x3d, 0xf3, 0xa7, 0x63, 0x6e, 0xc4, 0xa5, 0xeb, 0x6c, 0xc7, 0x55, 0x93, 0xb4,
	0xb4, 0x05, 0xd2, 0x5a, 0x02, 0x62, 0x0f, 0x6c, 0xe4, 0x73, 0xf3, 0x33, 0x9c, 0xee, 0xd4, 0xc3,
	0x3d, 0x36, 0xe5, 0x04, 0xd5, 0x00, 0x46, 0x6c, 0x32, 0x21, 0x23, 0xb9, 0x92, 0x22, 0xc3, 0xcd,
	0x70, 0xf8, 0xc6, 0x56, 0x5f, 0x2b, 0xf1, 0x96, 0xcb, 0x7c, 0x07, 0x47, 0x2d, 0xb2, 0x95, 0xbe,
	0xea, 0x3e, 0x0b, 0x2a, 0x1d, 0xcb, 0xcc, 0x14, 0x56, 0xe9, 0x78, 0xbb, 0x16, 0x35, 0x54, 0x8b,
	0xf9, 0x1e, 0x8e, 0x23, 0x09, 0xc1, 0x7a, 0x15, 0x48, 0x3c, 0x10, 0x57, 0xf8, 0x33, 0x12, 0xec,
	0x66, 0xfc, 0x6d, 0x37, 0xbc, 0x12, 0x9e, 0xff, 0x50, 0x20, 0xb5, 0x3e, 0x2a, 0x3a, 0x83, 0xe3,
	0x8e, 0xd5, 0xea, 0xda, 0xfd, 0x41, 0xa3, 0x39, 0x1c, 0x74, 0x7b, 0x4e, 0xb3, 0x6e, 0x5f, 0xdb,
	0xcd, 0x86, 0xbe, 0x17, 0xa6, 0x7a, 0x76, 0xab, 0x6b, 0x5f, 0xdb, 0x75, 0xab, 0xdb, 0xd7, 0x15,
	0x74, 0x02, 0x68, 0x43, 0x75, 0xde, 0x5c, 0x0e, 0x9d, 0xf6, 0xa0, 0xa7, 0xab, 0x11, 0xbc, 0x12,
	0xe0, 0xfb, 0x11, 0xbc, 0x7c, 0xb1, 0xc4, 0x35, 0xf4, 0x0c, 0x32, 0x1b, 0xdc, 0x6a, 0xb7, 0xf5,
	0xd8, 0xf9, 0x1d, 0x68, 0xce, 0xf2, 0xe9, 0xe8, 0x8e, 0xd5, 0xeb, 0x47, 0x76, 0xca, 0x40, 0x4a,
	0xa2, 0x37, 0x1f, 0x06, 0x58, 0x57, 0x50, 0x1a, 0x92, 0x72, 0x6c, 0x58, 0xb7, 0xba, 0x8a, 0xb2,
	0x00, 0x72, 0xba, 0x6a, 0x58, 0xb7, 0x8b, 0xaf, 0x1e, 0xc2, 0x81, 0x9c, 0xab, 0x17, 0x12, 0xd0,
	0x2a, 0xbf, 0x14, 0x48, 0x7f, 0x5c, 0xb4, 0xd1, 0x23, 0xb3, 0x39, 0x1d, 0x11, 0xf4, 0x05, 0x0e,
	0x23, 0x97, 0x47, 0x2f, 0xc3, 0x0d, 0xfe, 0xf9, 0xbf, 0xc9, 0xbd, 0xfa, 0x8f, 0x2a, 0xb8, 0xcf,
	0x27, 0xc8, 0x84, 0x0e, 0x87, 0xcc, 0xe8, 0xc3, 0xdc, 0x7d, 0x17, 0xb9, 0x17, 0xff, 0xd4, 0x2c,
	0x93, 0x6b, 0xda, 0x9d, 0x3a, 0x2f, 0xdf, 0xc7, 0xe5, 0x0f, 0x5e, 0xfd, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x72, 0xe7, 0x34, 0x38, 0x28, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QuakeServiceClient is the client API for QuakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuakeServiceClient interface {
	// Get list of earthquakes for given period (like past day) and magnitude.
	ListEarthquakes(ctx context.Context, in *ListEarthquakesRequest, opts ...grpc.CallOption) (*ListEarthquakesResponse, error)
	// Get earthquake by id.
	GetEarthquake(ctx context.Context, in *GetEarthquakeRequest, opts ...grpc.CallOption) (*GetEarthquakeResponse, error)
}

type quakeServiceClient struct {
	cc *grpc.ClientConn
}

func NewQuakeServiceClient(cc *grpc.ClientConn) QuakeServiceClient {
	return &quakeServiceClient{cc}
}

func (c *quakeServiceClient) ListEarthquakes(ctx context.Context, in *ListEarthquakesRequest, opts ...grpc.CallOption) (*ListEarthquakesResponse, error) {
	out := new(ListEarthquakesResponse)
	err := c.cc.Invoke(ctx, "/quake.api.v1.QuakeService/ListEarthquakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quakeServiceClient) GetEarthquake(ctx context.Context, in *GetEarthquakeRequest, opts ...grpc.CallOption) (*GetEarthquakeResponse, error) {
	out := new(GetEarthquakeResponse)
	err := c.cc.Invoke(ctx, "/quake.api.v1.QuakeService/GetEarthquake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuakeServiceServer is the server API for QuakeService service.
type QuakeServiceServer interface {
	// Get list of earthquakes for given period (like past day) and magnitude.
	ListEarthquakes(context.Context, *ListEarthquakesRequest) (*ListEarthquakesResponse, error)
	// Get earthquake by id.
	GetEarthquake(context.Context, *GetEarthquakeRequest) (*GetEarthquakeResponse, error)
}

// UnimplementedQuakeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQuakeServiceServer struct {
}

func (*UnimplementedQuakeServiceServer) ListEarthquakes(ctx context.Context, req *ListEarthquakesRequest) (*ListEarthquakesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEarthquakes not implemented")
}
func (*UnimplementedQuakeServiceServer) GetEarthquake(ctx context.Context, req *GetEarthquakeRequest) (*GetEarthquakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEarthquake not implemented")
}

func RegisterQuakeServiceServer(s *grpc.Server, srv QuakeServiceServer) {
	s.RegisterService(&_QuakeService_serviceDesc, srv)
}

func _QuakeService_ListEarthquakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEarthquakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuakeServiceServer).ListEarthquakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quake.api.v1.QuakeService/ListEarthquakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuakeServiceServer).ListEarthquakes(ctx, req.(*ListEarthquakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuakeService_GetEarthquake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEarthquakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuakeServiceServer).GetEarthquake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quake.api.v1.QuakeService/GetEarthquake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuakeServiceServer).GetEarthquake(ctx, req.(*GetEarthquakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuakeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quake.api.v1.QuakeService",
	HandlerType: (*QuakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEarthquakes",
			Handler:    _QuakeService_ListEarthquakes_Handler,
		},
		{
			MethodName: "GetEarthquake",
			Handler:    _QuakeService_GetEarthquake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quake/api/v1/quake_api.proto",
}
